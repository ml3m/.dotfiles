#!/bin/bash

if [ "$#" -lt 1 ]; then
    echo "Error: Usage is 'on <hub-name> [<hub-name> ...] \"file name\"'"
    exit 1
fi

# Extract the file name (last argument) and trim leading/trailing whitespace
file_name=$(echo "${@: -1}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

# Check if the file name is empty after trimming
if [ -z "$file_name" ]; then
    echo "Error: File name cannot be empty or contain only whitespace."
    exit 1
fi

# Extract the hub names (all arguments except the last one, if any)
if [ "$#" -eq 1 ]; then
    hub_names=()  # No hub names provided
else
    hub_names=("${@:1:$#-1}")
fi

# Define the hubs directory
base_dir="/Users/mlem/Library/Mobile Documents/com~apple~CloudDocs/main"
hubs_dir="${base_dir}/hubs"

# Ensure the hubs directory exists
mkdir -p "$hubs_dir"

# Check if each hub exists, and prompt the user to create it if it doesn't
for hub in "${hub_names[@]}"; do
    # Format the hub name as a markdown file
    hub_file="${hubs_dir}/$(echo "$hub" | tr '[:lower:]' '[:upper:]').md"
    if [ ! -e "$hub_file" ]; then
        echo "The hub '$hub' does not exist in the 'hubs/' directory."
        while true; do
            read -n 1 -p "Do you want to create the hub '$hub'? (y/n): " choice
            echo  # Move to a new line after user input
            case "$choice" in
                [Yy])
                    # Create the hub markdown file with the appropriate content
                    echo "This is the hub for $(echo "$hub" | tr '[:lower:]' '[:upper:]') created on: $(date "+%Y-%m-%d")" > "$hub_file"
                    echo "Hub '$hub' created at $hub_file."
                    break
                    ;;
                [Nn])
                    echo "Hub '$hub' was not created."
                    break
                    ;;
                *)
                    echo "Invalid input. Please press 'y' or 'n'."
                    ;;
            esac
        done
    fi
done

# Convert hub names to uppercase for tags and hubs
tags=()
hubs=()
for hub in "${hub_names[@]}"; do
    upper_hub=$(echo "$hub" | tr '[:lower:]' '[:upper:]')
    tags+=("$upper_hub")
    hubs+=("[[$upper_hub]]")
done

# Format the file name (replace spaces with underscores)
note_name=$(echo "$file_name" | tr ' ' '_')
formatted_file_name=$(date "+%Y-%m-%d")_${note_name}.md

# Define the directories to search for existing files
inbox_dir="${base_dir}/inbox"
notes_dir="${base_dir}/notes"

# Ensure the directories exist
mkdir -p "$inbox_dir"
mkdir -p "$notes_dir"

# Check if a file with the same note name (ignoring the date) already exists
existing_file=$(find "$inbox_dir" "$notes_dir" -type f -name "*_${note_name}.md" | head -n 1)

if [ -n "$existing_file" ]; then
    echo "A file with the name '${note_name}.md' already exists:"
    echo "$existing_file"
    while true; do
        read -n 1 -p "Do you want to open the existing file? (y/n): " choice
        echo  # Move to a new line after user input
        case "$choice" in
            [Yy]) 
                # Open the existing file in Neovim
                nvim "$existing_file"
                exit 0
                ;;
            [Nn]) 
                # Do nothing and exit
                echo "No action taken. Exiting."
                exit 0
                ;;
            *) 
                echo "Invalid input. Please press 'y' or 'n'."
                ;;
        esac
    done
fi

# Generate the metadata
metadata="---
date: $(date "+%Y-%m-%d")
time: $(date "+%H:%M:%S")
tags:
"
if [ ${#tags[@]} -eq 0 ]; then
    metadata+="    -
"
else
    for tag in "${tags[@]}"; do
        metadata+="    - $tag
"
    done
fi

metadata+="hubs:
"
if [ ${#hubs[@]} -eq 0 ]; then
    metadata+="    - \"[[]]\"
"
else
    for hub in "${hubs[@]}"; do
        metadata+="    - \"$hub\"
"
    done
fi

metadata+="urls:
    -
---

# ${note_name}
"

# Write the metadata to the file
new_file_path="${inbox_dir}/${formatted_file_name}"
echo "$metadata" > "$new_file_path"

# Open the file in Neovim, clean up, format the title, and save the file
nvim -c "silent! 1,/^\\S/s/^\\n\\{1,}//" \
     -c "silent! /^# /s/-/ /g" \
     -c "w" \
     "$new_file_path"
